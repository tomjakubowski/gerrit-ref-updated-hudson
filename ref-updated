#!/usr/bin/env python
#
# http://github.com/tomjakubowski/gerrit-ref-updated-hudson

import urllib
import urllib2
import optparse
import urlparse
import base64
import BaseHTTPServer

# hudson_config keys:
#
# url (REQUIRED): base URL for hudson. should be equal to HUDSON_URL env variable
# username: username for HTTP Authentication, if needed.
# password: password for HTTP Authentication, if needed.
#
# example:
#
# hudson_config = {
#     'url': "http://hudson/",
# }
hudson_config = {}

# refs:
#
# the first level of keys are Gerrit project names.
# for each Gerrit project name, specify a Gerrit refname you care about (e.g.
# a branch) as another key.
# for each refname, specify a required "job" key giving the Hudson job name.
# optionally specify an "authorization token" for the job as configured
# in Hudson. generally, if you don't provide a username and password, in
# hudson_config you will need to provide a token.
#
# example:
#
# refs = {
#     'tomjakubowski/widgets': {
#         'master': {
#             'job': "Widgets: Deploy staging",
#             'token': "top-secret-widget-factory"}}
# }
refs = {}


class PreemptiveBasicAuthHandler(urllib2.BaseHandler):
        # http://stackoverflow.com/a/8513913/692055

        def __init__(self, password_mgr=None):
                if password_mgr is None:
                        password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
                self.passwd = password_mgr
                self.add_password = self.passwd.add_password

        def http_request(self, req):
                uri = req.get_full_url()
                user, pw = self.passwd.find_user_password(None, uri)
                # print 'ADDING REQUEST HEADER for uri (%s): %s:%s' % (uri, user, pw)
                if pw is None:
                    return req

                raw = "%s:%s" % (user, pw)
                auth = 'Basic %s' % base64.b64encode(raw).strip()
                req.add_unredirected_header('Authorization', auth)
                return req


class HudsonConfigKeyError(KeyError):
    pass


def build_url(hudson_url, job, token=None):
    hudson_url = hudson_url.rstrip('/')
    build_url = "%s/job/%s/build" % (hudson_url, urllib.quote(job))
    if token is not None and len(token) > 0:
        build_url += "?token=%s" % urllib.quote(token)

    return build_url


def submit_build_request(hudson_config, job, token):
    try:
        url = build_url(hudson_config["url"], job, token)
    except KeyError as e:
        raise HudsonConfigKeyError(*e.args)

    if 'username' in hudson_config:
        username = hudson_config['username']
        password = hudson_config.get('password', None)
        password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
        netloc = urlparse.urlparse(url).netloc
        password_mgr.add_password(None, netloc, username, password)
        handler = PreemptiveBasicAuthHandler(password_mgr)
        opener = urllib2.build_opener(handler)
        urllib2.install_opener(opener)

    urllib2.urlopen(url)


def main():
    parser = optparse.OptionParser()
    parser.add_option("", "--oldrev")
    parser.add_option("", "--newrev")
    parser.add_option("", "--submitter")
    parser.add_option("", "--project")
    parser.add_option("", "--refname")
    (options, args) = parser.parse_args()
    try:
        project = options.project
        refname = options.refname
        ref_data = refs[project][refname]
    except KeyError:
        # no op if this project/refname aren't set up
        return

    try:
        job = ref_data['job']
        token = ref_data.get('token', None)
        submit_build_request(hudson_config, job, token)
    except HudsonConfigKeyError as e:
        print "Missing hudson_config key: '%s'" % e.args
    except KeyError as e:
        print "Missing job for %s:%s" % (project, refname)
    except urllib2.HTTPError as e:
        responses = BaseHTTPServer.BaseHTTPRequestHandler.responses
        concise, verbose = responses.get(e.code, ("Unknown", "Unknown HTTP error code"))
        print "HTTP Error: %d %s %s\n" % (e.code, concise, verbose)


if __name__ == "__main__":
    main()
